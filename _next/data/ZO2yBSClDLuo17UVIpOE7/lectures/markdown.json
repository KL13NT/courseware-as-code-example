{"pageProps":{"frontmatter":{"title":"Using Markdown","description":"A sample file to show how to use markdown in CaC.","created":"2023-01-19T21:10:21.338Z","updated":"2023-01-19T21:10:21.338Z"},"content":"<h1>Markdown</h1>\n<p>Markdown is a lightweight markup language that you can use to add formatting\nelements to plaintext text documents. This article lays out some examples of how it works\nand how is can be used in CaC, you can also read more about it in <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">Markdown\nCheatsheet</a>.</p>\n<p>You can use the [Markdown All in One] and [Markdown Shortcuts] VSCode extensions\nto easily format markdown files, add and automatically update table of contents\nand tables, etc. This combination makes markdown editing really fun!</p>\n<p>This document requires you view the source to understand how it works.</p>\n<h2>Headers</h2>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-section\"># This is an h1 tag (biggest)</span>\n\n<span class=\"hljs-section\">## This is an h2 tag</span>\n\n<span class=\"hljs-section\">### This is an h3 tag</span>\n\n<span class=\"hljs-section\">#### This is an h4 tag</span>\n\n<span class=\"hljs-section\">##### This is an h5 tag</span>\n\n<span class=\"hljs-section\">###### This is an h6 tag (smallest)</span>\n\nFor underline style:\n\n<span class=\"hljs-section\"># Alt-H1</span>\n\n<span class=\"hljs-section\">## Alt-H2</span>\n</code></pre>\n<p>Don't skip header levels, for example, don't go from an h1 to an h3. Skipping\nruins the accessibility and SEO of the output pages.</p>\n<h2>Paragraphs</h2>\n<pre><code class=\"hljs language-markdown\">Paragraphs shouldn't have tabs or spaces in the beginning. By default new lines\nin the output are created by leaving an empty line between two paragraphs or\nelements in general.\n\nThis is another paragraph after the first. You can have it in any formatting you like! Markdown is really fun!\n</code></pre>\n<p>Paragraphs shouldn't have tabs or spaces in the beginning. By default new lines\nin the output are created by leaving an empty line between two paragraphs or\nelements in general.</p>\n<p>This is another paragraph after the first. You can have it in any formatting you like! Markdown is really fun!</p>\n<h2>Emphasis</h2>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-emphasis\">_This text will be italic (This is the best practice)_</span>\n<span class=\"hljs-strong\">**This text will be bold (This is the best practice)**</span>\n<span class=\"hljs-emphasis\">_You <span class=\"hljs-strong\">**can**</span> combine them_</span>\n</code></pre>\n<p><em>This text will be italic (This is the best practice)</em></p>\n<p><strong>This text will be bold (This is the best practice)</strong></p>\n<p><em>You <strong>can</strong> combine them</em></p>\n<h2>Lists</h2>\n<h3>Unordered</h3>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-bullet\">-</span> Item 1\n<span class=\"hljs-bullet\">-</span> Item 2\n<span class=\"hljs-bullet\">  -</span> Item 2a\n<span class=\"hljs-bullet\">  -</span> Item 2b\n</code></pre>\n<ul>\n<li>Item 1</li>\n<li>Item 2\n<ul>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n</li>\n</ul>\n<h3>Ordered</h3>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-bullet\">1.</span> Item 1\n<span class=\"hljs-bullet\">2.</span> Item 2\n<span class=\"hljs-bullet\">3.</span> Item 3\n<span class=\"hljs-bullet\">   1.</span> Item 3a\n<span class=\"hljs-bullet\">   2.</span> Item 3b\n</code></pre>\n<ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3\n<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<h2>Blockquotes</h2>\n<p>As Abraham Lincoln once said:</p>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-quote\">> The problem with quotes found on the internet is they often are not true.</span>\n</code></pre>\n<blockquote>\n<p>The problem with quotes found on the internet is they often are not true.</p>\n</blockquote>\n<h2>Code</h2>\n<h3>Inline</h3>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-code\">`f(x) = x^2`</span> and <span class=\"hljs-code\">`f(x) = x^2`</span> are valid inline code.\n</code></pre>\n<p><code>f(x) = x^2</code> and <code>f(x) = x^2</code> are valid inline code.</p>\n<h3>Block</h3>\n<p>I recommend keeping in code in fences <code>```</code> (called Blocks). This gives you syntax\nhighlighting and are easier to type.</p>\n<pre><code class=\"hljs language-markdown\"><span class=\"hljs-code\">```java\npublic static void main(String[] args) {\n    System.out.println(\"Never gonna give you up\");\n}\n```</span>\n</code></pre>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    System.out.println(<span class=\"hljs-string\">\"Never gonna give you up\"</span>);\n}\n</code></pre>\n<h2>Links</h2>\n<h3>Inline</h3>\n<p>You can create links to anything you want by using the following syntax: <code>[link text](url)</code>.</p>\n<pre><code class=\"hljs language-markdown\">This is how to create links with the href embedded in the link itself: [<span class=\"hljs-string\">Google</span>](<span class=\"hljs-link\">https://www.google.com</span>).\n</code></pre>\n<p>This is how to create links with the href embedded in the link itself: <a href=\"https://www.google.com\">Google</a>.</p>\n<h3>Reference</h3>\n<p>You can create reference links which are useful when you use the same link\nmultiple times on the same page. They're also recommended because they make the\nMarkdown source easier to read. References are case-insensitive.</p>\n<pre><code class=\"hljs language-markdown\">This is a paragraph with reference-style links! Visit [<span class=\"hljs-string\">Google</span>] and [<span class=\"hljs-string\">Facebook</span>]! You can also have numbered references and they'd still work. [<span class=\"hljs-string\">YouTube</span>][<span class=\"hljs-symbol\">1</span>] is an example. References to files also work! [file].\n\n[<span class=\"hljs-symbol\">google</span>]: <span class=\"hljs-link\">https://www.google.com</span>\n[<span class=\"hljs-symbol\">facebook</span>]: <span class=\"hljs-link\">https://www.facebook.com</span>\n[<span class=\"hljs-symbol\">1</span>]: <span class=\"hljs-link\">https://www.youtube.com</span>\n[<span class=\"hljs-symbol\">file</span>]: <span class=\"hljs-link\">./latex.md</span>\n</code></pre>\n<p>This is a paragraph with reference-style links! Visit <a href=\"https://www.google.com\">Google</a> and <a href=\"https://www.facebook.com\">Facebook</a>! You can also have numbered references and they'd still work. <a href=\"https://www.youtube.com\">YouTube</a> is an example. References to files also work! <a href=\"./latex.md\">file</a>.</p>\n<h3>Angle Brackets</h3>\n<pre><code class=\"hljs language-markdown\">URLs in angle brackets will automatically get turned into links. <span class=\"xml\">&#x3C;http://www.example.com></span>.\n</code></pre>\n<p>URLs in angle brackets will automatically get turned into links. <a href=\"http://www.example.com\">http://www.example.com</a>.</p>\n<h2>Tables</h2>\n<p>You can add tables in markdown to be rendered as accessible HTML tables. The\nfollowing code produces the output below:</p>\n<pre><code class=\"hljs language-markdown\">| Column A | Column B | Column C |\n| -------- | -------- | -------- |\n| A1       | B1       | C1       |\n| A2       | B2       | C2       |\n| A3       | B3       | C3       |\n</code></pre>\n<p>| Column A | Column B | Column C |\n| -------- | -------- | -------- |\n| A1       | B1       | C1       |\n| A2       | B2       | C2       |\n| A3       | B3       | C3       |</p>","slug":"markdown","path":"lecture/markdown","dir":"/home/runner/work/courseware-as-code-example/courseware-as-code-example/courseware-as-code-template-master/collections/lectures"},"__N_SSG":true}